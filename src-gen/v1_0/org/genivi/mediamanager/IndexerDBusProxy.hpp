/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Indexer control interface. Allows administerial tasks for
                  the
 *   indexer backend, such as starting, stopping and requesting
                 
 *   status of the indexer.
                  For querying the database, please
 *   see
                  org.genivi.mediamanager.Browser
 */
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_PROXY_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_PROXY_HPP_

#include <v1_0/org/genivi/mediamanager/IndexerProxyBase.hpp>
#include "v1_0/org/genivi/mediamanager/IndexerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

class IndexerDBusProxy
    : virtual public IndexerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    IndexerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~IndexerDBusProxy() { }

    virtual IndexerStatusAttribute& getIndexerStatusAttribute();


    /**
     * description: Get the path to the database file in the host file system.
                        
     *    This is the database file used by LMS to store metadata
     * param: output: Path to database file in host file system
     * deprecated: This is only used for testing purposes and will be removed
     */
    virtual COMMONAPI_DEPRECATED void getDatabasePath(CommonAPI::CallStatus &_internalCallStatus, std::string &_output, Indexer::IndexerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDatabasePathAsync(GetDatabasePathAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: If the indexer is currently IDLE or RUNNING
                          (see
     *   IndexerStatus), stop indexing and set IndexerStatus
                          to
     *   STOPPED.
                          If indexer is currently STOPPED, no action is
     *   taken
     */
    virtual void stopIndexing(CommonAPI::CallStatus &_internalCallStatus, Indexer::IndexerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopIndexingAsync(StopIndexingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: If indexer is currently STOPPED (see IndexerStatus),
                         
     *   status is changed to RUNNING and indexing is RUNNING. If
                         
     *   the status is IDLE or RUNNING, no action is taken.
                          Note
     *   that the status may go from RUNNING to IDLE directly
                         
     *   after issuing this call, if no files are to be indexed
     */
    virtual void startIndexing(CommonAPI::CallStatus &_internalCallStatus, Indexer::IndexerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startIndexingAsync(StartIndexingAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
    
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<IndexerStatusAttribute>> indexerStatus_;


};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_PROXY_HPP_

