/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_

#include <v1_0/org/genivi/mediamanager/PlayerProxyBase.hpp>
#include "v1_0/org/genivi/mediamanager/PlayerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

class PlayerDBusProxy
    : virtual public PlayerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    PlayerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~PlayerDBusProxy() { }

    virtual MuteAttribute& getMuteAttribute();
    virtual ShuffleAttribute& getShuffleAttribute();
    virtual RepeatAttribute& getRepeatAttribute();
    virtual RateAttribute& getRateAttribute();
    virtual VolumeAttribute& getVolumeAttribute();
    virtual CanGoNextAttribute& getCanGoNextAttribute();
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute();
    virtual CanPauseAttribute& getCanPauseAttribute();
    virtual CanPlayAttribute& getCanPlayAttribute();
    virtual CanSeekAttribute& getCanSeekAttribute();
    virtual CurrentTrackAttribute& getCurrentTrackAttribute();
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute();
    virtual PositionAttribute& getPositionAttribute();
    virtual DurationAttribute& getDurationAttribute();


    /**
     * description: Skip to the next track in the play queue. If there is no
                          
     *   next track, playback is stopped. If playback is paused or
                        
     *     stopped, this function will set the next plack to be
                          
     *   played once playback is activated
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Open the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                       NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                      NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Dequeue the item with the supplied index in the playback
                         
     *   engine.
     * param: pos index of media to dequeue
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieve the current play queue. The format of the result
                         
     *   object is described in MediaTypes.fidl
             returns: Current play queue
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Dequeue all elements, emptying the play queue
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Use the supplied playlist as the current play queue. If
                         
     *   the play queue is invalid, the old play queue is
                         
     *   untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *               NO_ERROR     On success
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Pause playback in the playback engine.
                           If already
     *   paused, this has no effect
                           Note: If CanPause is false,
     *   this has no effect
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Start or resume playback in the playback engine.
                           If
     *   playback is already commencing, this has not effect.
                           If
     *   paused, playback resumes from the current position.
                           If
     *   there is no track to play, calling this has no effect
                          
     *   Note: If CanPlay is false, this has no effect
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Starts playback (see Play) if paused
                          Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Loads previous track in play queue
                          If there is no
     *   previous track, playback is stopped
                          If playback is
     *   stopped or paused, it remains this way,
                          but the next
     *   track to be played will the set
                          by this function
           
     *                 Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Seek relatively in the current track
                          If a negative seek
     *   leads to a play position less than 0,
                          the play position
     *   will be set to 0.
                          If a positive seek leads outside the
     *   length of the current
                          track, this is treated like a call
     *   to Next()
                          Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Jump to the specified position in the current
                           If the
     *   position is not within range of the current track,
                           do
     *   nothing
             Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
    
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>> mute_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>> shuffle_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>> repeat_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RateAttribute>> rate_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VolumeAttribute>> volume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoNextAttribute>> canGoNext_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoPreviousAttribute>> canGoPrevious_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPauseAttribute>> canPause_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPlayAttribute>> canPlay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanSeekAttribute>> canSeek_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentTrackAttribute>> currentTrack_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackStatusAttribute>> playbackStatus_;
    CommonAPI::DBus::DBusReadonlyAttribute<PositionAttribute> position_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DurationAttribute>> duration_;


};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_

