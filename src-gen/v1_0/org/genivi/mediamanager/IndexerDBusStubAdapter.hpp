/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Indexer control interface. Allows administerial tasks for
                  the
 *   indexer backend, such as starting, stopping and requesting
                 
 *   status of the indexer.
                  For querying the database, please
 *   see
                  org.genivi.mediamanager.Browser
 */
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/org/genivi/mediamanager/IndexerStub.hpp>
#include "v1_0/org/genivi/mediamanager/IndexerDBusDeployment.hpp"        
#include <v1_0/org/genivi/mediamanager/MediaTypesDBusDeployment.hpp>
#include <v1_0/org/genivi/mediamanager/IndexerDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<IndexerStub> IndexerDBusStubAdapterHelper;

class IndexerDBusStubAdapterInternal
    : public virtual IndexerStubAdapter,
      public IndexerDBusStubAdapterHelper
{
public:
    IndexerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~IndexerDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    /**
     * description: Get the current status of the indexer.
     */
    void fireIndexerStatusAttributeChanged(const ::v1_0::org::genivi::mediamanager::Indexer::IndexerStatus& value);



    const IndexerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::IndexerStub,
        CommonAPI::Version
        > getIndexerInterfaceVersionStubDispatcher;

/**
 * description: Get the current status of the indexer.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::IndexerStub,
        ::v1_0::org::genivi::mediamanager::Indexer::IndexerStatus                
        > getIndexerStatusAttributeStubDispatcher;


/**
 * description: Get the path to the database file in the host file system.
                    
 *    This is the database file used by LMS to store metadata
 * param: output: Path to database file in host file system
 * deprecated: This is only used for testing purposes and will be removed
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::IndexerStub,
    std::tuple<>,
    std::tuple<std::string, Indexer::IndexerError>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > getDatabasePathStubDispatcher;
/**
 * description: If the indexer is currently IDLE or RUNNING
                      (see
 *   IndexerStatus), stop indexing and set IndexerStatus
                      to
 *   STOPPED.
                      If indexer is currently STOPPED, no action is
 *   taken
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::IndexerStub,
    std::tuple<>,
    std::tuple<Indexer::IndexerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > stopIndexingStubDispatcher;
/**
 * description: If indexer is currently STOPPED (see IndexerStatus),
                     
 *   status is changed to RUNNING and indexing is RUNNING. If
                     
 *   the status is IDLE or RUNNING, no action is taken.
                      Note
 *   that the status may go from RUNNING to IDLE directly
                     
 *   after issuing this call, if no files are to be indexed
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::IndexerStub,
    std::tuple<>,
    std::tuple<Indexer::IndexerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > startIndexingStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    IndexerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class IndexerDBusStubAdapter
    : public IndexerDBusStubAdapterInternal,
      public std::enable_shared_from_this<IndexerDBusStubAdapter> {
public:
    IndexerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          IndexerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_HPP_
