/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT_HPP_


#include <v1_0/org/genivi/mediamanager/BrowserStub.hpp>
#include <sstream>

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Provides a default implementation for BrowserStubRemoteEvent and
 * BrowserStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class BrowserStubDefault
    : public virtual BrowserStub {
public:
    BrowserStubDefault();

    BrowserStubRemoteEvent* initStubAdapter(const std::shared_ptr<BrowserStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: Return a list of all media manager identifiers. These are
             used to
     *   indicate which media manager we should interact with.
             returns: A list
     *   of all media managers found
     */
    virtual void discoverMediaManagers(const std::shared_ptr<CommonAPI::ClientId> _client, discoverMediaManagersReply_t _reply);
    /**
     * description: List all containers below the given path.
             returns: ResultMapList of
     *   all containers with the given path as parent.
             	   	  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                     browsing
     *   engine
                     BAD_PATH if path parameter is invalid
     * param: path The path to search for containers. The format of the path
                   
     *   depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    virtual void listContainers(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, listContainersReply_t _reply);
    /**
     * description: Extends ListContainers with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    virtual void listContainersEx(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey _sortKey, listContainersExReply_t _reply);
    /**
     * description: List all items in the given container
             returns: A ResultMapList of all
     *   items with the given container as parent.
             		  See MediaTypes.fidl for
     *   a list of allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for items.
                    The format
     *   of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    virtual void listItems(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, listItemsReply_t _reply);
    /**
     * description: Extends ListItems with sorting capabilities
     * param: sortKey Key to sort ResultMapList
     */
    virtual void listItemsEx(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey _sortKey, listItemsExReply_t _reply);
    /**
     * description: List all children in the given container
             returns: A ResultMapList of
     *   all children with the given container as parent.
             		  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    virtual void listChildren(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, listChildrenReply_t _reply);
    /**
     * description: Extends ListChildren with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    virtual void listChildrenEx(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey _sortKey, listChildrenExReply_t _reply);
    /**
     * description: Search for children in the given container
             returns: A ResultMapList of
     *   all children matching the search criteria with
                       the given
     *   container as parent.See MediaTypes.fidl for a list of
                      
     *   allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    virtual void searchObjects(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _query, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, searchObjectsReply_t _reply);
    /**
     * description: Extends SearchObjects with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    virtual void searchObjectsEx(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _query, uint64_t _offset, uint64_t _count, std::vector<std::string> _filter, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey _sortKey, searchObjectsExReply_t _reply);
    /**
     * description: Get a list of all initial letters and their index in the
                         
     *   given container
             returns: A list of tuples of initial letters and
     *   their first
                       observed position when sorting according to
     *   sortKey
             errors: NO_CONNECTION if no connection can be established to
     *   underlying
                     browsing engine
                     BAD_PATH if path
     *   parameter is invalid
     * param: container: Container to build index list for
     * param: count: How many (unsorted) items should be traversed to build
                     
     *          index
     * param: filter: List of initial letters to include
     * param: sortKey: Key to sort on when building index list
     */
    virtual void listIndexes(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _container, uint64_t _count, std::vector<std::string> _filter, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey _sortKey, listIndexesReply_t _reply);
    /**
     * description: Create a new empty container with path used as root
             returns: Path
     *   identifier for the newly created container
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: displayName: Display name for the new container
     * param: childTypes: Array of allowed types on children in new container
     */
    virtual void createContainer(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _displayName, std::vector<std::string> _childTypes, createContainerReply_t _reply);
    /**
     * description: Place a reference in a container, pointing to an object
             returns: Path
     *   identifier for the container containing the reference
             errors:
     *   NO_CONNECTION if no connection can be established to underlying
                  
     *      browsing engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: objectPath: Path to object to create reference to
     */
    virtual void createReference(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _objectPath, createReferenceReply_t _reply);



protected:
    class RemoteEventHandler: public virtual BrowserStubRemoteEvent {
    public:
        RemoteEventHandler(BrowserStubDefault *_defaultStub);


    private:
        BrowserStubDefault *defaultStub_;
    };
private:
    BrowserStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT
