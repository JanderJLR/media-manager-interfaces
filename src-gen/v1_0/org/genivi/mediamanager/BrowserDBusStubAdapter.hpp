/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Browser_DBUS_STUB_ADAPTER_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Browser_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/org/genivi/mediamanager/BrowserStub.hpp>
#include "v1_0/org/genivi/mediamanager/BrowserDBusDeployment.hpp"        
#include <v1_0/org/genivi/mediamanager/MediaTypesDBusDeployment.hpp>
#include <v1_0/org/genivi/mediamanager/BrowserTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<BrowserStub> BrowserDBusStubAdapterHelper;

class BrowserDBusStubAdapterInternal
    : public virtual BrowserStubAdapter,
      public BrowserDBusStubAdapterHelper
{
public:
    BrowserDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~BrowserDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const BrowserDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::BrowserStub,
        CommonAPI::Version
        > getBrowserInterfaceVersionStubDispatcher;



/**
 * description: Return a list of all media manager identifiers. These are
         used to
 *   indicate which media manager we should interact with.
         returns: A list
 *   of all media managers found
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, CommonAPI::EmptyDeployment>
    
    > discoverMediaManagersStubDispatcher;
/**
 * description: List all containers below the given path.
         returns: ResultMapList of
 *   all containers with the given path as parent.
         	   	  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                 browsing
 *   engine
                 BAD_PATH if path parameter is invalid
 * param: path The path to search for containers. The format of the path
               
 *   depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listContainersStubDispatcher;
/**
 * description: Extends ListContainers with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listContainersExStubDispatcher;
/**
 * description: List all items in the given container
         returns: A ResultMapList of all
 *   items with the given container as parent.
         		  See MediaTypes.fidl for
 *   a list of allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for items.
                The format
 *   of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listItemsStubDispatcher;
/**
 * description: Extends ListItems with sorting capabilities
 * param: sortKey Key to sort ResultMapList
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listItemsExStubDispatcher;
/**
 * description: List all children in the given container
         returns: A ResultMapList of
 *   all children with the given container as parent.
         		  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listChildrenStubDispatcher;
/**
 * description: Extends ListChildren with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > listChildrenExStubDispatcher;
/**
 * description: Search for children in the given container
         returns: A ResultMapList of
 *   all children matching the search criteria with
                   the given
 *   container as parent.See MediaTypes.fidl for a list of
                  
 *   allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: query Search query to match children against. The format of the
               
 *   query depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > searchObjectsStubDispatcher;
/**
 * description: Extends SearchObjects with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > searchObjectsExStubDispatcher;
/**
 * description: Get a list of all initial letters and their index in the
                     
 *   given container
         returns: A list of tuples of initial letters and
 *   their first
                   observed position when sorting according to
 *   sortKey
         errors: NO_CONNECTION if no connection can be established to
 *   underlying
                 browsing engine
                 BAD_PATH if path
 *   parameter is invalid
 * param: container: Container to build index list for
 * param: count: How many (unsorted) items should be traversed to build
                 
 *          index
 * param: filter: List of initial letters to include
 * param: sortKey: Key to sort on when building index list
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > listIndexesStubDispatcher;
/**
 * description: Create a new empty container with path used as root
         returns: Path
 *   identifier for the newly created container
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: displayName: Display name for the new container
 * param: childTypes: Array of allowed types on children in new container
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, std::vector<std::string>>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > createContainerStubDispatcher;
/**
 * description: Place a reference in a container, pointing to an object
         returns: Path
 *   identifier for the container containing the reference
         errors:
 *   NO_CONNECTION if no connection can be established to underlying
              
 *      browsing engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: objectPath: Path to object to create reference to
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > createReferenceStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    BrowserDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class BrowserDBusStubAdapter
    : public BrowserDBusStubAdapterInternal,
      public std::enable_shared_from_this<BrowserDBusStubAdapter> {
public:
    BrowserDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          BrowserDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Browser_DBUS_STUB_ADAPTER_HPP_
