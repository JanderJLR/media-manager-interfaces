/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/org/genivi/mediamanager/PlayerStub.hpp>
#include "v1_0/org/genivi/mediamanager/PlayerDBusDeployment.hpp"        
#include <v1_0/org/genivi/mediamanager/MediaTypesDBusDeployment.hpp>
#include <v1_0/org/genivi/mediamanager/PlayerTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PlayerStub> PlayerDBusStubAdapterHelper;

class PlayerDBusStubAdapterInternal
    : public virtual PlayerStubAdapter,
      public PlayerDBusStubAdapterHelper
{
public:
    PlayerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~PlayerDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    void fireMuteAttributeChanged(const ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus& value);
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    void fireShuffleAttributeChanged(const ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& value);
    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    void fireRepeatAttributeChanged(const ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus& value);
    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    void fireRateAttributeChanged(const double& value);
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    void fireVolumeAttributeChanged(const double& value);
    /**
     * description: Indicates whether Next() is available
     */
    void fireCanGoNextAttributeChanged(const bool& value);
    /**
     * description: Indicates whether Previous() is available
     */
    void fireCanGoPreviousAttributeChanged(const bool& value);
    /**
     * description: Indicates whether Pause() is available
     */
    void fireCanPauseAttributeChanged(const bool& value);
    /**
     * description: Indicates whether Play() is available
     */
    void fireCanPlayAttributeChanged(const bool& value);
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    void fireCanSeekAttributeChanged(const bool& value);
    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    void fireCurrentTrackAttributeChanged(const uint64_t& value);
    /**
     * description: Indicates current playback status
     */
    void firePlaybackStatusAttributeChanged(const ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus& value);
    /**
     * description: Indicates duration of the current track
     */
    void fireDurationAttributeChanged(const uint64_t& value);



    const PlayerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        CommonAPI::Version
        > getPlayerInterfaceVersionStubDispatcher;

/**
 * description: Mute or unmute audio. When muted, the player backend will
                     
 *   not produce any audio output.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus                
        > getMuteAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus                    
        > setMuteAttributeStubDispatcher;
/**
 * description: Shuffle or unshuffle the current play queue. Shuffling,
                  
 *   un-shuffling and then re-shuffling will yield two different
                  
 *   shufflings (which are not guaranteed to be different)
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus                
        > getShuffleAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus                    
        > setShuffleAttributeStubDispatcher;
/**
 * description: Toggle repeat for the current playlist. If enabled,
                     
 *   playback will continue with the first item of the current
                    
 *    play queue when the last item has finished playing
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus                
        > getRepeatAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus                    
        > setRepeatAttributeStubDispatcher;
/**
 * description: Get or set the playback rate. The allowed range of values
                     
 *   is -16 to +16
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        double                
        > getRateAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        double                    
        > setRateAttributeStubDispatcher;
/**
 * description: Get or set volume, 0 is muted, and 1.0 means maximum
                     
 *   volume. Values outside this range will be capped
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        double                
        > getVolumeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        double                    
        > setVolumeAttributeStubDispatcher;
/**
 * description: Indicates whether Next() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        bool                
        > getCanGoNextAttributeStubDispatcher;
/**
 * description: Indicates whether Previous() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        bool                
        > getCanGoPreviousAttributeStubDispatcher;
/**
 * description: Indicates whether Pause() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        bool                
        > getCanPauseAttributeStubDispatcher;
/**
 * description: Indicates whether Play() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        bool                
        > getCanPlayAttributeStubDispatcher;
/**
 * description: Indicates whether Seek and SetPosition() are available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        bool                
        > getCanSeekAttributeStubDispatcher;
/**
 * description: Indicates the index in the play queue of the currently
                     
 *   playing track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        uint64_t                
        > getCurrentTrackAttributeStubDispatcher;
/**
 * description: Indicates current playback status
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus                
        > getPlaybackStatusAttributeStubDispatcher;
/**
 * description: Indicates current position in the currently playing
                      track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        uint64_t                
        > getPositionAttributeStubDispatcher;
/**
 * description: Indicates duration of the current track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::PlayerStub,
        uint64_t                
        > getDurationAttributeStubDispatcher;


/**
 * description: Skip to the next track in the play queue. If there is no
                      
 *   next track, playback is stopped. If playback is paused or
                    
 *     stopped, this function will set the next plack to be
                      
 *   played once playback is activated
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > nextStubDispatcher;
/**
 * description: Open the supplied Uri for playback in the playback engine.
         returns:
 *   INVALID_URI When an invalid URI is supplied
                              
 *   (decided by playback engine)
                   NO_ERROR    On success
 * param: uri URI of media to play, uri format is decided by backend
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<std::string>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > openUriStubDispatcher;
/**
 * description: Enqueue the supplied Uri for playback in the playback engine.
         returns:
 *   INVALID_URI When an invalid URI is supplied
                              
 *   (decided by playback engine)
                  NO_ERROR    On success
 * param: uri URI of media to enqueue, uri format is decided by backend
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<std::string>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > enqueueUriStubDispatcher;
/**
 * description: Dequeue the item with the supplied index in the playback
                     
 *   engine.
 * param: pos index of media to dequeue
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > dequeueIndexStubDispatcher;
/**
 * description: Retrieve the current play queue. The format of the result
                     
 *   object is described in MediaTypes.fidl
         returns: Current play queue
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > getCurrentPlayQueueStubDispatcher;
/**
 * description: Dequeue all elements, emptying the play queue
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > dequeueAllStubDispatcher;
/**
 * description: Use the supplied playlist as the current play queue. If
                     
 *   the play queue is invalid, the old play queue is
                     
 *   untouched.
         returns: BAD_PLAYLIST If playlist can not be loaded
      
 *               NO_ERROR     On success
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<std::string>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > openPlaylistStubDispatcher;
/**
 * description: Pause playback in the playback engine.
                       If already
 *   paused, this has no effect
                       Note: If CanPause is false,
 *   this has no effect
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > pauseStubDispatcher;
/**
 * description: Start or resume playback in the playback engine.
                       If
 *   playback is already commencing, this has not effect.
                       If
 *   paused, playback resumes from the current position.
                       If
 *   there is no track to play, calling this has no effect
                      
 *   Note: If CanPlay is false, this has no effect
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > playStubDispatcher;
/**
 * description: Starts playback (see Play) if paused
                      Pauses playback (see
 *   Pause) is playing
 * see: Play
 * see: Pause
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > playPauseStubDispatcher;
/**
 * description: Loads previous track in play queue
                      If there is no
 *   previous track, playback is stopped
                      If playback is
 *   stopped or paused, it remains this way,
                      but the next
 *   track to be played will the set
                      by this function
       
 *                 Note: If CanGoPrevious is false, this has no effect
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > previousStubDispatcher;
/**
 * description: Seek relatively in the current track
                      If a negative seek
 *   leads to a play position less than 0,
                      the play position
 *   will be set to 0.
                      If a positive seek leads outside the
 *   length of the current
                      track, this is treated like a call
 *   to Next()
                      Note: If CanSeek is false, this has no effect
 * param: pos Relative seek amount in microseconds
 * see: Next
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<int64_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > seekStubDispatcher;
/**
 * description: Jump to the specified position in the current
                       If the
 *   position is not within range of the current track,
                       do
 *   nothing
         Note: If CanSeek is false, this has no effect
 * param: pos Absolute position in microseconds
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::PlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::PlayerTypes::PlayerError>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setPositionStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    PlayerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class PlayerDBusStubAdapter
    : public PlayerDBusStubAdapterInternal,
      public std::enable_shared_from_this<PlayerDBusStubAdapter> {
public:
    PlayerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          PlayerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_HPP_
