/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Media_Types_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Media_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

struct MediaTypes {
    
    struct MediaManagerError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NO_ERROR = 0
        };
        
        MediaManagerError() = default;
        MediaManagerError(const Literal &_value) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_value)) {}
    
        inline bool operator==(const MediaManagerError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MediaManagerError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MediaManagerError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MediaManagerError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MediaManagerError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MediaManagerError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BackendError : MediaManagerError {
        enum Literal : int32_t {
            BACKEND_UNREACHABLE = 1
        };
        
        BackendError() = default;
        BackendError(const Literal &_value) 
            : MediaManagerError(static_cast<MediaManagerError::Literal>(_value)) {}
        BackendError &operator=(const MediaManagerError::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool operator==(const BackendError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BackendError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BackendError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BackendError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BackendError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BackendError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<std::string> StringList;
    typedef CommonAPI::Variant<StringList, int32_t, uint32_t, int64_t, uint64_t, bool, float, double, std::string>  ResultUnion;
    typedef std::unordered_map<std::string, ::v1_0::org::genivi::mediamanager::MediaTypes::ResultUnion> ResultMap;
    typedef std::vector<ResultMap> ResultMapList;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.mediamanager.MediaTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct MediaTypes

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

namespace CommonAPI {
}


namespace std {
    //Hash for BackendError
    template<>
    struct hash<::v1_0::org::genivi::mediamanager::MediaTypes::BackendError> {
        inline size_t operator()(const ::v1_0::org::genivi::mediamanager::MediaTypes::BackendError& backendError) const {
            return static_cast<int32_t>(backendError);
        }
    };
    //Hash for MediaManagerError
    template<>
    struct hash<::v1_0::org::genivi::mediamanager::MediaTypes::MediaManagerError> {
        inline size_t operator()(const ::v1_0::org::genivi::mediamanager::MediaTypes::MediaManagerError& mediaManagerError) const {
            return static_cast<int32_t>(mediaManagerError);
        }
    };
}

#endif // ORG_GENIVI_MEDIAMANAGER_Media_Types_HPP_
