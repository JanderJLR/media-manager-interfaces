/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/org/genivi/mediamanager/Browser.hpp>
#include <v1_0/org/genivi/mediamanager/BrowserDBusStubAdapter.hpp>

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createBrowserDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<BrowserDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerBrowserDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Browser::getInterface(), &createBrowserDBusStubAdapter);
}

BrowserDBusStubAdapterInternal::~BrowserDBusStubAdapterInternal() {
    deactivateManagedInstances();
    BrowserDBusStubAdapterHelper::deinit();
}

void BrowserDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* BrowserDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: Return a list of all media manager identifiers. These are
                 used to
         *   indicate which media manager we should interact with.
                 returns: A list
         *   of all media managers found
         */
        "<method name=\"discoverMediaManagers\">\n"
            "<arg name=\"_identifiers\" type=\"as\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: List all containers below the given path.
                 returns: ResultMapList of
         *   all containers with the given path as parent.
                 	   	  See
         *   MediaTypes.fidl for a list of allowed keys.
                 errors: NO_CONNECTION if
         *   no connection can be established to underlying
                         browsing
         *   engine
                         BAD_PATH if path parameter is invalid
         * param: path The path to search for containers. The format of the path
                       
         *   depends on the underlying browsing backend
         * param: offset: The offset to use for indexing the results list
         * param: count: The number of results to return, starting from offset
         * param: filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listContainers\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Extends ListContainers with sorting capabilities
         * param: sortKey Key to sort ResultMapList on
         */
        "<method name=\"listContainersEx\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: List all items in the given container
                 returns: A ResultMapList of all
         *   items with the given container as parent.
                 		  See MediaTypes.fidl for
         *   a list of allowed keys.
                 errors: NO_CONNECTION if no connection can be
         *   established to underlying
                         browsing engine
                        
         *   BAD_PATH if path parameter is invalid
         * param: path The path of the container to search for items.
                        The format
         *   of the path depends on the underlying browsing
                        backend
         * param: offset: The offset to use for indexing the results list
         * param: count: The number of results to return, starting from offset
         * param: filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listItems\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Extends ListItems with sorting capabilities
         * param: sortKey Key to sort ResultMapList
         */
        "<method name=\"listItemsEx\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: List all children in the given container
                 returns: A ResultMapList of
         *   all children with the given container as parent.
                 		  See
         *   MediaTypes.fidl for a list of allowed keys.
                 errors: NO_CONNECTION if
         *   no connection can be established to underlying
                          browsing
         *   engine
                          BAD_PATH if path parameter is invalid
         * param: path The path of the container to search for children.
                        The
         *   format of the path depends on the underlying browsing
                        backend
         * param: offset: The offset to use for indexing the results list
         * param: count: The number of results to return, starting from offset
         * param: filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listChildren\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Extends ListChildren with sorting capabilities
         * param: sortKey Key to sort ResultMapList on
         */
        "<method name=\"listChildrenEx\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Search for children in the given container
                 returns: A ResultMapList of
         *   all children matching the search criteria with
                           the given
         *   container as parent.See MediaTypes.fidl for a list of
                          
         *   allowed keys.
                 errors: NO_CONNECTION if no connection can be
         *   established to underlying
                         browsing engine
                        
         *   BAD_PATH if path parameter is invalid
         * param: path The path of the container to search for children.
                        The
         *   format of the path depends on the underlying browsing
                        backend
         * param: query Search query to match children against. The format of the
                       
         *   query depends on the underlying browsing backend
         * param: offset: The offset to use for indexing the results list
         * param: count: The number of results to return, starting from offset
         * param: filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"searchObjects\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Extends SearchObjects with sorting capabilities
         * param: sortKey Key to sort ResultMapList on
         */
        "<method name=\"searchObjectsEx\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"_m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get a list of all initial letters and their index in the
                             
         *   given container
                 returns: A list of tuples of initial letters and
         *   their first
                           observed position when sorting according to
         *   sortKey
                 errors: NO_CONNECTION if no connection can be established to
         *   underlying
                         browsing engine
                         BAD_PATH if path
         *   parameter is invalid
         * param: container: Container to build index list for
         * param: count: How many (unsorted) items should be traversed to build
                         
         *          index
         * param: filter: List of initial letters to include
         * param: sortKey: Key to sort on when building index list
         */
        "<method name=\"listIndexes\">\n"
            "<arg name=\"_container\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"_indexes\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Create a new empty container with path used as root
                 returns: Path
         *   identifier for the newly created container
                 errors: NO_CONNECTION if
         *   no connection can be established to underlying
                          browsing
         *   engine
                          BAD_PATH if path parameter is invalid
         * param: path: Path to place the newly created container in
         * param: displayName: Display name for the new container
         * param: childTypes: Array of allowed types on children in new container
         */
        "<method name=\"createContainer\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_displayName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_childTypes\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Place a reference in a container, pointing to an object
                 returns: Path
         *   identifier for the container containing the reference
                 errors:
         *   NO_CONNECTION if no connection can be established to underlying
                      
         *      browsing engine
                          BAD_PATH if path parameter is invalid
         * param: path: Path to place the newly created container in
         * param: objectPath: Path to object to create reference to
         */
        "<method name=\"createReference\">\n"
            "<arg name=\"_path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_objectPath\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::org::genivi::mediamanager::BrowserStub,
        CommonAPI::Version
        > BrowserDBusStubAdapterInternal::getBrowserInterfaceVersionStubDispatcher(&BrowserStub::getInterfaceVersion, "uu");




/**
 * description: Return a list of all media manager identifiers. These are
         used to
 *   indicate which media manager we should interact with.
         returns: A list
 *   of all media managers found
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::discoverMediaManagersStubDispatcher(
    &BrowserStub::discoverMediaManagers, "asi",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: List all containers below the given path.
         returns: ResultMapList of
 *   all containers with the given path as parent.
         	   	  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                 browsing
 *   engine
                 BAD_PATH if path parameter is invalid
 * param: path The path to search for containers. The format of the path
               
 *   depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listContainersStubDispatcher(
    &BrowserStub::listContainers, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Extends ListContainers with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listContainersExStubDispatcher(
    &BrowserStub::listContainersEx, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: List all items in the given container
         returns: A ResultMapList of all
 *   items with the given container as parent.
         		  See MediaTypes.fidl for
 *   a list of allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for items.
                The format
 *   of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listItemsStubDispatcher(
    &BrowserStub::listItems, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Extends ListItems with sorting capabilities
 * param: sortKey Key to sort ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listItemsExStubDispatcher(
    &BrowserStub::listItemsEx, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: List all children in the given container
         returns: A ResultMapList of
 *   all children with the given container as parent.
         		  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listChildrenStubDispatcher(
    &BrowserStub::listChildren, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Extends ListChildren with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listChildrenExStubDispatcher(
    &BrowserStub::listChildrenEx, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Search for children in the given container
         returns: A ResultMapList of
 *   all children matching the search criteria with
                   the given
 *   container as parent.See MediaTypes.fidl for a list of
                  
 *   allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: query Search query to match children against. The format of the
               
 *   query depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::searchObjectsStubDispatcher(
    &BrowserStub::searchObjects, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Extends SearchObjects with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::searchObjectsExStubDispatcher(
    &BrowserStub::searchObjectsEx, "aa{s(yv)}i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<::v1_0::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Get a list of all initial letters and their index in the
                     
 *   given container
         returns: A list of tuples of initial letters and
 *   their first
                   observed position when sorting according to
 *   sortKey
         errors: NO_CONNECTION if no connection can be established to
 *   underlying
                 browsing engine
                 BAD_PATH if path
 *   parameter is invalid
 * param: container: Container to build index list for
 * param: count: How many (unsorted) items should be traversed to build
                 
 *          index
 * param: filter: List of initial letters to include
 * param: sortKey: Key to sort on when building index list
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, uint64_t, std::vector<std::string>, ::v1_0::org::genivi::mediamanager::BrowserTypes::SortKey>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, ::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::listIndexesStubDispatcher(
    &BrowserStub::listIndexes, "si",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<::v1_0::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Create a new empty container with path used as root
         returns: Path
 *   identifier for the newly created container
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: displayName: Display name for the new container
 * param: childTypes: Array of allowed types on children in new container
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string, std::vector<std::string>>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::createContainerStubDispatcher(
    &BrowserStub::createContainer, "si",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Place a reference in a container, pointing to an object
         returns: Path
 *   identifier for the container containing the reference
         errors:
 *   NO_CONNECTION if no connection can be established to underlying
              
 *      browsing engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: objectPath: Path to object to create reference to
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::org::genivi::mediamanager::BrowserStub,
    std::tuple<std::string, std::string>,
    std::tuple<std::string, ::v1_0::org::genivi::mediamanager::BrowserTypes::BrowserError>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > BrowserDBusStubAdapterInternal::createReferenceStubDispatcher(
    &BrowserStub::createReference, "si",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));





const BrowserDBusStubAdapterHelper::StubDispatcherTable& BrowserDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& BrowserDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

BrowserDBusStubAdapterInternal::BrowserDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      BrowserDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<BrowserStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Return a list of all media manager identifiers. These are
                     used to
             *   indicate which media manager we should interact with.
                     returns: A list
             *   of all media managers found
             */
            { { "discoverMediaManagers", "" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::discoverMediaManagersStubDispatcher },
            /**
             * description: List all containers below the given path.
                     returns: ResultMapList of
             *   all containers with the given path as parent.
                     	   	  See
             *   MediaTypes.fidl for a list of allowed keys.
                     errors: NO_CONNECTION if
             *   no connection can be established to underlying
                             browsing
             *   engine
                             BAD_PATH if path parameter is invalid
             * param: path The path to search for containers. The format of the path
                           
             *   depends on the underlying browsing backend
             * param: offset: The offset to use for indexing the results list
             * param: count: The number of results to return, starting from offset
             * param: filter: Array of keys to include in resulting ResultMapList
             */
            { { "listContainers", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listContainersStubDispatcher },
            /**
             * description: Extends ListContainers with sorting capabilities
             * param: sortKey Key to sort ResultMapList on
             */
            { { "listContainersEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listContainersExStubDispatcher },
            /**
             * description: List all items in the given container
                     returns: A ResultMapList of all
             *   items with the given container as parent.
                     		  See MediaTypes.fidl for
             *   a list of allowed keys.
                     errors: NO_CONNECTION if no connection can be
             *   established to underlying
                             browsing engine
                            
             *   BAD_PATH if path parameter is invalid
             * param: path The path of the container to search for items.
                            The format
             *   of the path depends on the underlying browsing
                            backend
             * param: offset: The offset to use for indexing the results list
             * param: count: The number of results to return, starting from offset
             * param: filter: Array of keys to include in resulting ResultMapList
             */
            { { "listItems", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listItemsStubDispatcher },
            /**
             * description: Extends ListItems with sorting capabilities
             * param: sortKey Key to sort ResultMapList
             */
            { { "listItemsEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listItemsExStubDispatcher },
            /**
             * description: List all children in the given container
                     returns: A ResultMapList of
             *   all children with the given container as parent.
                     		  See
             *   MediaTypes.fidl for a list of allowed keys.
                     errors: NO_CONNECTION if
             *   no connection can be established to underlying
                              browsing
             *   engine
                              BAD_PATH if path parameter is invalid
             * param: path The path of the container to search for children.
                            The
             *   format of the path depends on the underlying browsing
                            backend
             * param: offset: The offset to use for indexing the results list
             * param: count: The number of results to return, starting from offset
             * param: filter: Array of keys to include in resulting ResultMapList
             */
            { { "listChildren", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listChildrenStubDispatcher },
            /**
             * description: Extends ListChildren with sorting capabilities
             * param: sortKey Key to sort ResultMapList on
             */
            { { "listChildrenEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listChildrenExStubDispatcher },
            /**
             * description: Search for children in the given container
                     returns: A ResultMapList of
             *   all children matching the search criteria with
                               the given
             *   container as parent.See MediaTypes.fidl for a list of
                              
             *   allowed keys.
                     errors: NO_CONNECTION if no connection can be
             *   established to underlying
                             browsing engine
                            
             *   BAD_PATH if path parameter is invalid
             * param: path The path of the container to search for children.
                            The
             *   format of the path depends on the underlying browsing
                            backend
             * param: query Search query to match children against. The format of the
                           
             *   query depends on the underlying browsing backend
             * param: offset: The offset to use for indexing the results list
             * param: count: The number of results to return, starting from offset
             * param: filter: Array of keys to include in resulting ResultMapList
             */
            { { "searchObjects", "ssttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::searchObjectsStubDispatcher },
            /**
             * description: Extends SearchObjects with sorting capabilities
             * param: sortKey Key to sort ResultMapList on
             */
            { { "searchObjectsEx", "ssttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::searchObjectsExStubDispatcher },
            /**
             * description: Get a list of all initial letters and their index in the
                                 
             *   given container
                     returns: A list of tuples of initial letters and
             *   their first
                               observed position when sorting according to
             *   sortKey
                     errors: NO_CONNECTION if no connection can be established to
             *   underlying
                             browsing engine
                             BAD_PATH if path
             *   parameter is invalid
             * param: container: Container to build index list for
             * param: count: How many (unsorted) items should be traversed to build
                             
             *          index
             * param: filter: List of initial letters to include
             * param: sortKey: Key to sort on when building index list
             */
            { { "listIndexes", "stas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listIndexesStubDispatcher },
            /**
             * description: Create a new empty container with path used as root
                     returns: Path
             *   identifier for the newly created container
                     errors: NO_CONNECTION if
             *   no connection can be established to underlying
                              browsing
             *   engine
                              BAD_PATH if path parameter is invalid
             * param: path: Path to place the newly created container in
             * param: displayName: Display name for the new container
             * param: childTypes: Array of allowed types on children in new container
             */
            { { "createContainer", "ssas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::createContainerStubDispatcher },
            /**
             * description: Place a reference in a container, pointing to an object
                     returns: Path
             *   identifier for the container containing the reference
                     errors:
             *   NO_CONNECTION if no connection can be established to underlying
                          
             *      browsing engine
                              BAD_PATH if path parameter is invalid
             * param: path: Path to place the newly created container in
             * param: objectPath: Path to object to create reference to
             */
            { { "createReference", "ss" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::createReferenceStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::getBrowserInterfaceVersionStubDispatcher });
}

const bool BrowserDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0
