/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_STUB_DEFAULT_HPP_
#define ORG_GENIVI_MEDIAMANAGER_Player_STUB_DEFAULT_HPP_


#include <v1_0/org/genivi/mediamanager/PlayerStub.hpp>
#include <sstream>

namespace v1_0 {
namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Provides a default implementation for PlayerStubRemoteEvent and
 * PlayerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class PlayerStubDefault
    : public virtual PlayerStub {
public:
    PlayerStubDefault();

    PlayerStubRemoteEvent* initStubAdapter(const std::shared_ptr<PlayerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus& getMuteAttribute();
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus& getMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMuteAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus _value);
    virtual void setMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus _value);
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& getShuffleAttribute();
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& getShuffleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setShuffleAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _value);
    virtual void setShuffleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _value);
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus& getRepeatAttribute();
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus& getRepeatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRepeatAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus _value);
    virtual void setRepeatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus _value);
    virtual const double& getRateAttribute();
    virtual const double& getRateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRateAttribute(double _value);
    virtual void setRateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, double _value);
    virtual const double& getVolumeAttribute();
    virtual const double& getVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setVolumeAttribute(double _value);
    virtual void setVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, double _value);
    virtual const bool& getCanGoNextAttribute();
    virtual const bool& getCanGoNextAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCanGoNextAttribute(bool _value);
    virtual const bool& getCanGoPreviousAttribute();
    virtual const bool& getCanGoPreviousAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCanGoPreviousAttribute(bool _value);
    virtual const bool& getCanPauseAttribute();
    virtual const bool& getCanPauseAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCanPauseAttribute(bool _value);
    virtual const bool& getCanPlayAttribute();
    virtual const bool& getCanPlayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCanPlayAttribute(bool _value);
    virtual const bool& getCanSeekAttribute();
    virtual const bool& getCanSeekAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCanSeekAttribute(bool _value);
    virtual const uint64_t& getCurrentTrackAttribute();
    virtual const uint64_t& getCurrentTrackAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCurrentTrackAttribute(uint64_t _value);
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus& getPlaybackStatusAttribute();
    virtual const ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus& getPlaybackStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlaybackStatusAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus _value);
    virtual const uint64_t& getPositionAttribute();
    virtual const uint64_t& getPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionAttribute(uint64_t _value);
    virtual const uint64_t& getDurationAttribute();
    virtual const uint64_t& getDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDurationAttribute(uint64_t _value);

    /**
     * description: Skip to the next track in the play queue. If there is no
                          
     *   next track, playback is stopped. If playback is paused or
                        
     *     stopped, this function will set the next plack to be
                          
     *   played once playback is activated
     */
    virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client, nextReply_t _reply);
    /**
     * description: Open the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                       NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _uri, openUriReply_t _reply);
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                      NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     */
    virtual void enqueueUri(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _uri, enqueueUriReply_t _reply);
    /**
     * description: Dequeue the item with the supplied index in the playback
                         
     *   engine.
     * param: pos index of media to dequeue
     */
    virtual void dequeueIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _pos, dequeueIndexReply_t _reply);
    /**
     * description: Retrieve the current play queue. The format of the result
                         
     *   object is described in MediaTypes.fidl
             returns: Current play queue
     */
    virtual void getCurrentPlayQueue(const std::shared_ptr<CommonAPI::ClientId> _client, getCurrentPlayQueueReply_t _reply);
    /**
     * description: Dequeue all elements, emptying the play queue
     */
    virtual void dequeueAll(const std::shared_ptr<CommonAPI::ClientId> _client, dequeueAllReply_t _reply);
    /**
     * description: Use the supplied playlist as the current play queue. If
                         
     *   the play queue is invalid, the old play queue is
                         
     *   untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *               NO_ERROR     On success
     */
    virtual void openPlaylist(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _uri, openPlaylistReply_t _reply);
    /**
     * description: Pause playback in the playback engine.
                           If already
     *   paused, this has no effect
                           Note: If CanPause is false,
     *   this has no effect
     */
    virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client, pauseReply_t _reply);
    /**
     * description: Start or resume playback in the playback engine.
                           If
     *   playback is already commencing, this has not effect.
                           If
     *   paused, playback resumes from the current position.
                           If
     *   there is no track to play, calling this has no effect
                          
     *   Note: If CanPlay is false, this has no effect
     */
    virtual void play(const std::shared_ptr<CommonAPI::ClientId> _client, playReply_t _reply);
    /**
     * description: Starts playback (see Play) if paused
                          Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     */
    virtual void playPause(const std::shared_ptr<CommonAPI::ClientId> _client, playPauseReply_t _reply);
    /**
     * description: Loads previous track in play queue
                          If there is no
     *   previous track, playback is stopped
                          If playback is
     *   stopped or paused, it remains this way,
                          but the next
     *   track to be played will the set
                          by this function
           
     *                 Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client, previousReply_t _reply);
    /**
     * description: Seek relatively in the current track
                          If a negative seek
     *   leads to a play position less than 0,
                          the play position
     *   will be set to 0.
                          If a positive seek leads outside the
     *   length of the current
                          track, this is treated like a call
     *   to Next()
                          Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     */
    virtual void seek(const std::shared_ptr<CommonAPI::ClientId> _client, int64_t _pos, seekReply_t _reply);
    /**
     * description: Jump to the specified position in the current
                           If the
     *   position is not within range of the current track,
                           do
     *   nothing
             Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     */
    virtual void setPosition(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _pos, setPositionReply_t _reply);



protected:
    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    virtual bool trySetMuteAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus _value);
    virtual bool validateMuteAttributeRequestedValue(const ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus &_value);
    virtual void onRemoteMuteAttributeChanged();
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    virtual bool trySetShuffleAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _value);
    virtual bool validateShuffleAttributeRequestedValue(const ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus &_value);
    virtual void onRemoteShuffleAttributeChanged();
    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    virtual bool trySetRepeatAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus _value);
    virtual bool validateRepeatAttributeRequestedValue(const ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus &_value);
    virtual void onRemoteRepeatAttributeChanged();
    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    virtual bool trySetRateAttribute(double _value);
    virtual bool validateRateAttributeRequestedValue(const double &_value);
    virtual void onRemoteRateAttributeChanged();
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    virtual bool trySetVolumeAttribute(double _value);
    virtual bool validateVolumeAttributeRequestedValue(const double &_value);
    virtual void onRemoteVolumeAttributeChanged();
    /**
     * description: Indicates whether Next() is available
     */
    virtual bool trySetCanGoNextAttribute(bool _value);
    virtual bool validateCanGoNextAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates whether Previous() is available
     */
    virtual bool trySetCanGoPreviousAttribute(bool _value);
    virtual bool validateCanGoPreviousAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates whether Pause() is available
     */
    virtual bool trySetCanPauseAttribute(bool _value);
    virtual bool validateCanPauseAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates whether Play() is available
     */
    virtual bool trySetCanPlayAttribute(bool _value);
    virtual bool validateCanPlayAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    virtual bool trySetCanSeekAttribute(bool _value);
    virtual bool validateCanSeekAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    virtual bool trySetCurrentTrackAttribute(uint64_t _value);
    virtual bool validateCurrentTrackAttributeRequestedValue(const uint64_t &_value);
    /**
     * description: Indicates current playback status
     */
    virtual bool trySetPlaybackStatusAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus _value);
    virtual bool validatePlaybackStatusAttributeRequestedValue(const ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus &_value);
    /**
     * description: Indicates current position in the currently playing
                          track
     */
    virtual bool trySetPositionAttribute(uint64_t _value);
    virtual bool validatePositionAttributeRequestedValue(const uint64_t &_value);
    /**
     * description: Indicates duration of the current track
     */
    virtual bool trySetDurationAttribute(uint64_t _value);
    virtual bool validateDurationAttributeRequestedValue(const uint64_t &_value);
    class RemoteEventHandler: public virtual PlayerStubRemoteEvent {
    public:
        RemoteEventHandler(PlayerStubDefault *_defaultStub);

        /**
         * description: Mute or unmute audio. When muted, the player backend will
                             
         *   not produce any audio output.
         */
        virtual bool onRemoteSetMuteAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus _value);
        virtual bool onRemoteSetMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus _value);
        virtual void onRemoteMuteAttributeChanged();

        /**
         * description: Shuffle or unshuffle the current play queue. Shuffling,
                          
         *   un-shuffling and then re-shuffling will yield two different
                          
         *   shufflings (which are not guaranteed to be different)
         */
        virtual bool onRemoteSetShuffleAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _value);
        virtual bool onRemoteSetShuffleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _value);
        virtual void onRemoteShuffleAttributeChanged();

        /**
         * description: Toggle repeat for the current playlist. If enabled,
                             
         *   playback will continue with the first item of the current
                            
         *    play queue when the last item has finished playing
         */
        virtual bool onRemoteSetRepeatAttribute(::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus _value);
        virtual bool onRemoteSetRepeatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus _value);
        virtual void onRemoteRepeatAttributeChanged();

        /**
         * description: Get or set the playback rate. The allowed range of values
                             
         *   is -16 to +16
         */
        virtual bool onRemoteSetRateAttribute(double _value);
        virtual bool onRemoteSetRateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, double _value);
        virtual void onRemoteRateAttributeChanged();

        /**
         * description: Get or set volume, 0 is muted, and 1.0 means maximum
                             
         *   volume. Values outside this range will be capped
         */
        virtual bool onRemoteSetVolumeAttribute(double _value);
        virtual bool onRemoteSetVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, double _value);
        virtual void onRemoteVolumeAttributeChanged();

        /**
         * description: Indicates whether Next() is available
         */

        /**
         * description: Indicates whether Previous() is available
         */

        /**
         * description: Indicates whether Pause() is available
         */

        /**
         * description: Indicates whether Play() is available
         */

        /**
         * description: Indicates whether Seek and SetPosition() are available
         */

        /**
         * description: Indicates the index in the play queue of the currently
                             
         *   playing track
         */

        /**
         * description: Indicates current playback status
         */

        /**
         * description: Indicates current position in the currently playing
                              track
         */

        /**
         * description: Indicates duration of the current track
         */


    private:
        PlayerStubDefault *defaultStub_;
    };
private:
    PlayerStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    ::v1_0::org::genivi::mediamanager::PlayerTypes::MuteStatus muteAttributeValue_;
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    ::v1_0::org::genivi::mediamanager::PlayerTypes::ShuffleStatus shuffleAttributeValue_;
    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    ::v1_0::org::genivi::mediamanager::PlayerTypes::RepeatStatus repeatAttributeValue_;
    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    double rateAttributeValue_;
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    double volumeAttributeValue_;
    /**
     * description: Indicates whether Next() is available
     */
    bool canGoNextAttributeValue_;
    /**
     * description: Indicates whether Previous() is available
     */
    bool canGoPreviousAttributeValue_;
    /**
     * description: Indicates whether Pause() is available
     */
    bool canPauseAttributeValue_;
    /**
     * description: Indicates whether Play() is available
     */
    bool canPlayAttributeValue_;
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    bool canSeekAttributeValue_;
    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    uint64_t currentTrackAttributeValue_;
    /**
     * description: Indicates current playback status
     */
    ::v1_0::org::genivi::mediamanager::PlayerTypes::PlaybackStatus playbackStatusAttributeValue_;
    /**
     * description: Indicates current position in the currently playing
                          track
     */
    uint64_t positionAttributeValue_;
    /**
     * description: Indicates duration of the current track
     */
    uint64_t durationAttributeValue_;

    CommonAPI::Version interfaceVersion_;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1_0

#endif // ORG_GENIVI_MEDIAMANAGER_Player_STUB_DEFAULT
